1. HTML(HyperText Markup Language) 개요
	웹 페이지는 HTML 문서라고도 불리며, HTML 태그들로 구성된다.
	각각의 HTML 태그는 웹 페이지의 디자인이나 기능을 결정하는데 사용된다
	모든 태그는 미리 정의되어 있으며, 각각의 태그와 속성을 사용하기만 하면 된다.

	W3C는 World Wide Web Consortium의 약자
	W3C는 월드 와이드 웹을 위한 표준을 제정하고 관리하는 중립적인 기관	
	W3C가 지정한 웹 표준
		HTML, CSS, DOM, SVG, XHTML, XML
			    JS


2. HTML 태그와 요소
 	<태그이름> 내용 </태그이름>
	여기부터 ~~~~~~~~여기까지 를 요소라고 한다.

	<태그이름 />


	<태그이름 속성이름="속성값"> 내용 </태그이름>

	*HTML을 공부한다는 것은 여러종류의 태그와 그에 맞는 속성들을 배우는 것
	  즉, 요소를 통째로 배우는 것


3. HTML 페이지의 기본 구조

<!DOCTYPE html>

<html>
	<head>
		<meta charset="EUC-KR">
		<title>Insert title here</title>
	</head>
	<body>

	</body>
</html>



<!DOCTYPE html> : 현재 문서가 HTML5 문서임을 명시

<html> : HTML 문서의 루트(root) 요소를 정의

<head> : HTML 문서의 메타데이터(metadata)를 정의


	*메타데이터(metadata)란 IT에서 일반적으로 데이터에 관한 데이터, 데이터에 관한 정보로 쓰이는 용어
		HTML에서는 웹 브라우저에는 직접적으로 표현되지 않는 문서에 대한 정보를 의미
		HTML에서 메타데이터는 <title>, <style>, <meta>, <link>, <script>, <base>태그 등을 이용하여 표현
		이 중 style은 CSS, script는 js 파일로 따로 만들기도 한다.


<meta charset="EUC-KR"> : 웹 브라우저에게 HTML 문서가 사용하는 문자셋을 알려준다. 
	ASCII : 가장 처음 만들어진 문자셋으로, 인터넷에서 사용할 수 있는 127개의 영문자와 숫자로 구성
	ANSI : 윈도우즈에서 만든 문자셋으로, 총 256개의 문자 코드를 지원
	ISO-8859-1 : 256개의 문자 코드를 지원하는 HTML4의 기본 문자셋
	UTF-8 : 세상에 있는 거의 모든 문자를 표현할 수 있는 유니코드 문자를 지원하는 HTML5의 기본 문자셋



<title> : HTML 문서의 제목(title)을 정의하며, 다음과 같은 용도로 사용
	웹 브라우저의 툴바(toolbar)에 표시
	웹 브라우저의 즐겨찾기(favorites)에 추가할 때 즐겨찾기의 제목
	검색 엔진의 결과 페이지에 제목으로 표시

<body> : 웹 브라우저를 통해 보이는 내용(content) 부분입니다.



4. HTML 텍스트 요소
  1) 제목
	<h숫자>	글자 크기를 조절, 1~6 중 1이 제일 큰 글자

  2) 단락
	<p>	단락을 구분
	<br>	개행

  3) 주석
	<!-- 주석내용 -->


5. HTML 기본 요소
  1) 스타일
	태그에 style 속성 추가, 태그에 하나하나 추가하기보다는 CSS 파일로 따로 정리, 나중에 CSS에서 배운다.


  2) 색
	<h1 style="color:#CEF279">제목1</h1>

  3) 배경
	<body background="이미지 주소">

	이미지 주소 : URL		https://movie-phinf.pstatic.net/20190322_116/1553219997859r6wec_JPEG/movie_image.jpg


		   절대 경로	기준이 절대적, 기준이 항상 / (webcontent)	/img/movie_image.jpg
		   상대 경로	기준이 상대적, 기준이 현재 파일의 위치		img/movie_image.jpg
					../ 한단계 상위 디렉토리	

			
  4) 링크
	<a href="경로"> 내용 </a>


  5) 이미지
	<img src="이미지 경로" alt="이미지가 없어요" style="width:300px; height:500px" />

  6) 리스트
    (1) 순서 있는 리스트
	<ol>
		<li>아이템1</li>
		<li>아이템2</li>
		<li>아이템3</li>
	</ol>

    (2) 순서 없는 리스트
	<ul>
		<li>아이템1</li>
		<li>아이템2</li>
		<li>아이템3</li>
	</ul>


  7) 테이블
    <table border="1">
	<tr>
		<th></th>
		<th></th>
	</tr>
	<tr>
		<td></td>
		<td></td>
	</tr>
    </table>



6. HTML 공간 분할
  HTML의 모든 요소는 해당 요소가 웹 브라우저에 어떻게 보이는가를 결정짓는 디스플레이 속성을 가지고 있다.
  대부분의 HTML 요소는 이러한 디스플레이 속성으로 블록 또는 인라인 속성을 가지게 됩니다.

  1) 블록
    디스플레이 속성값이 블록인 요소는 언제나 새로운 라인에서 시작하며 해당 라인의 모든 너비를 차지
	<p>, <div>, <h>, <ul>, <ol>, <form>
	
	<div style="background-color:lightgrey; color:green; text-align:center">
	    <h1>div요소를 이용한 스타일 적용</h1>
	    <p>이렇게 div요소로 여러 요소들을 묶은 다음에 style 속성과 클래스 등을 이용하여
	    한 번에 스타일을 적용할 수 있습니다.</p>
	</div>

	div는 실제로 많이 쓰이는 태그, 주로 공간을 나누는 박스로 이용, CSS에서 다루는 대부분의 내용이 div 태그에 스타일을 적용하는 것

  2) 인라인
    디스플레이 속성값이 인라인인 요소는 새로운 라인에서 시작하지 않는다.
    요소의 너비도 해당 라인 전체가 아닌 해당 HTML 요소의 내용만큼만 차지
	<span>, <a>, <img>

	<p>이렇게
		<span style="border: 3px solid red">텍스트의 일부분</span>
		만을 따로 묶은 후에 스타일을 적용할 수 있습니다.
	</p>

  3) 레이아웃 설정
    (1) div 이용한 설정 (가장 많이 사용)
<!DOCTYPE html>
<html lang="ko">

<head>
	<meta charset="UTF-8">
	<title>HTML Layouts</title>
	<style>
		#header {
			background-color:lightgrey;
			height:100px;
		}
		#nav {
			background-color:#339999;
			color:white;
			width:200px;
			height:300px;
			float:left;
		}
		#section {
			width:200px;
			text-align:left;
			float:left;
			padding:10px;
		}
		#footer {
			background-color:#FFCC00;
			height:100px;
			clear:both;
		}
		#header, #nav, #section, #footer { text-align:center; }
		#header, #footer { line-height:100px; }
		#nav, #section { line-height:240px; }
	</style>
</head>

<body>

	<h1>div 요소를 이용한 레이아웃</h1>
	<div id="header">
		<h2>HEADER 영역</h2>
	</div>
	<div id="nav">
		<h2>NAV 영역</h2>
	</div>
	<div id="section">
		<p>SECTION 영역</p>
	</div>
	<div id="footer">
		<h2>FOOTER 영역</h2>
	</div>

</body>

</html>
    (2) HTMl 태그를 이용한 설정 (HTML5에서 추가됨)
<!DOCTYPE html>
<html lang="ko">

<head>
	<meta charset="UTF-8">
	<title>HTML Layouts</title>
	<style>
		header {
			background-color:lightgrey;
			height:100px;
		}
		nav {
			background-color:#339999;
			color:white;
			width:200px;
			height:300px;
			float:left;
		}
		section {
			width:200px;
			text-align:left;
			float:left;
			padding:10px;
		}
		footer {
			background-color:#FFCC00;
			height:100px;
			clear:both;
		}
		header, nav, section, footer { text-align:center; }
		header, footer { line-height:100px; }
		nav, section { line-height:240px; }
	</style>
</head>

<body>

	<h1>HTML5 레이아웃</h1>
	<header>
		<h2>HEADER 영역</h2>
	</header>
	<nav>
		<h2>NAV 영역</h2>
	</nav>
	<section>
		<p>SECTION 영역</p>
	</section>
	<footer>
		<h2>FOOTER 영역</h2>
	</footer>

</body>

</html>
    (3) table을 이용한 설정
<!DOCTYPE html>
<html lang="ko">

<head>
	<meta charset="UTF-8">
	<title>HTML Layouts</title>
</head>

<body>

	<h1>table 요소를 이용한 레이아웃</h1>
	<table width="100%" style="text-align:center; border:none">
		<tr>
			<td colspan="2" style="background-color:lightgrey">
				<h2>HEADER 영역</h2>
			</td>
		</tr>
		<tr>
			<td style="background-color:#339999; color:white; width:20%">
				<h2>NAV 영역</h2>
			</td>
			<td style="height:200px; text-align:left">
				<p>SECTION 영역</p>
			</td>
		</tr>
		<tr>
			<td colspan="2" style="background-color:#FFCC00">
				<h2>FOOTER 영역</h2>
			</td>
		</tr>
	</table>

</body>

</html>


7. HTML 입력 양식
  1) form 태그
	<form action="처리할페이지주소" method="get|post">
		내용
	</form>

	form태그 안에 작성된 여러가지 내용을 action 속성에 설정된 페이지로 전달

  2) HTTP 메소드
    (1) GET
	  클라이언트가 서버로 요청할 때 사용, 클라이언트가 서버에게 데이터 전달 가능

	  데이터를 전달할 때 데이터를 URL에 포함시켜서 전달, 중요하지 않은 데이터를 서버로 전달할 때 사용

	  데이터를 전달하지 않을 때 기본적으로 사용하는 요청 방식


    (2) POST
	  클라이언트가 서버로 요청할 때 사용, 클라이언트가 서버에게 데이터 전달 가능

	  데이터를 전달할 때 HTTP Body부분에 포함시켜서 전달, 아이디나 패스워드와 같은 중요한 정보를 전달할 때 사용

		


  3) 입력 양식

    (1) 텍스트 입력(text)
		<input type="text">

		*form 태그를 이용해서 데이터를 전달할 때 내용을 input 태그에 담아서 보낸다.
		 받는 페이지에서 request.getParameter("매개변수명"); 으로 받았다면
		 input 태그의 name 속성에 매개변수명을 지정해야 제대로 값이 전달된다.

		 ex) <input type="text" name="매개변수명" />

    (2) 비밀번호 입력(password)
		<input type="password">

		*받는 페이지에서 text 받을때와 똑같이 받으면 된다.


    (3) 라디오 버튼(radio)
		<input type="radio">

	<input type="radio" name="lecture" value="HTML" /> HTML <br/>
	<input type="radio" name="lecture" value="CSS" /> CSS <br/>
	<input type="radio" name="lecture" value="JSP" /> JSP <br/>
	
		*3개의 버튼이 하나의 주제라는 것을 알려주기 위해서 name 속성을 똑같이 지정
		 오른쪽에 써준 값은 실제 값을 입력한 것이 아니라 단순히 화면에 출력한 것이기 때문에 
		 값을 전달하기 위해서는 value 속성에 값을 지정해야 한다.


    (4) 체크박스(checkbox)
		<input type="checkbox">
	<input type="checkbox" name="hobby" value="movie" /> 영화 <br/>
	<input type="checkbox" name="hobby" value="football" /> 축구 <br/>
	<input type="checkbox" name="hobby" value="basketball" /> 농구 <br/>
	<input type="checkbox" name="hobby" value="pingpong" /> 탁구 <br/>
	

		*여러개의 체크박스를 동시에 체크해서 보낼 때는 받는 쪽에서 따로 처리가 필요하다.
		 받는 쪽에서는 request.getParameterValues("매개변수명");
		 메소드를 이용해서 문자열 배열 형태로 전달받는다.


    (5) 파일 선택(file)
		<input type="file" name="file">

		*file 타입은 받는 jsp 쪽에서 추가적인 코딩이 필요하다. JSP 때 수업함.


    (6) 전송 버튼(submit)
		<input type="submit" value="로그인">


    (7) 히든 타입(hidden)
		<input type="hidden" name="매개변수명" value="값">




    (8) 문장 입력(textarea)
	<textarea rows="10" cols="50" name="dataarea">
	
	</textarea>


    (9) 선택 입력(select)
	<select name="fruit">
		<option value="apple"> 사과
		<option value="banana"> 바나나
		<option value="berry"> 딸기
		<option value="kiwi"> 키위
	</select>



	질문은 여기로
	kgitbankjsp@gmail.com

